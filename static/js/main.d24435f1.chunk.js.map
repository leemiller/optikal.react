{"version":3,"sources":["Notes.js","util.js","settings.js","components/ScaleConstellation.js","components/ColorWheelWedge.js","components/HighlightWedge.js","components/ColorWheel.js","Scales.js","components/FretboardHighlightNotes.js","components/ColoredString.js","components/FretboardColoredNotes.js","components/FretboardInlays.js","components/Frets.js","components/FretboardBinding.js","components/Fretboard.js","components/FrettedInstrument.js","components/TonicSelector.js","components/ScaleSelector.js","components/InstrumentSelector.js","components/FlattedNameToggle.js","App.js","index.js"],"names":["sequence","Note","name","color","altName","this","Notes","noteIndices","Object","fromEntries","map","n","i","indexFor","tonic","currentIndex","length","NoteSequence","number","isNaN","Error","notes","notesGenerated","note","push","LocationOfPointAt","angle","radius","xOffset","yOffset","radians","Math","PI","x","cos","y","sin","CenterTextOffset","ref","setOffset","getWidth","getHeight","stageCenterPoint","wheelStageSideLength","wedgeRadius","wedgeAngle","instrumentSettings","guitar","numFrets","strings","scaleLength","stringSectionHeight","bindingHeight","nutWidth","heelWidth","fretWireWidth","fretMarkers","fretboardColor","bass","uke","ScaleConstellation","scaleNoteIndices","labelOffset","points","useMemo","rotation","index","lineEnd","label","lines","lineProperties","pos","listening","fill","stroke","strokeWidth","shadowColor","shadowBlur","shadowOffset","firstNotePoint","p","key","pointerLength","pointerWidth","MakeLines","labels","text","fontSize","fillAfterStrokeEnabled","id","ColorWheelWedge","React","forwardRef","noteIndex","props","initialangle","initialrotation","scale","opacity","HighlightWedge","activeNote","newAngle","attrs","newRotation","to","duration","easing","Easings","ElasticEaseOut","scaleX","scaleY","ColorWheel","setActiveNote","getNoteName","staticWedges","onMouseOver","evt","target","onMouseOut","Scales","Acoustic","Algerian","Altered","Augmented","Blues","Chromatic","Enigmatic","Gypsy","Hirjoshi","Insen","Major","Istrian","Iwato","FretboardHighlightNotes","frettedNotesPerString","stringIndex","stringHeight","o","height","ColoredString","isInScale","stringNote","isActiveNote","width","stringFill","stringStroke","stringBlur","shadowEnabled","FretboardColoredNotes","fretDistancesFromNut","fretWidths","openStringNoteName","notesInScale","stringWidth","padding","position","filter","frettedNotes","fretNotes","fretDistance","thisFretWidth","FretboardInlays","fretMarkerLocations","fretboardHeight","fml","inlayHeight","markerYOffset","markerStart","markerWidth","markNumber","Frets","fretHeight","f","FretboardBinding","markerHeight","markerY","octaveWidth","secondMarkerX","Fretboard","displayWidth","boardColor","sceneFunc","ctx","shape","beginPath","moveTo","bezierCurveTo","closePath","fillStrokeShape","FrettedInstrument","data","Array","from","_","pow","slice","d","totalDistance","fm","fretWidth","notePositionsPerString","openNoteName","string","notesByLocation","sn","instrumentData","displayHeight","ni","TonicSelector","tonicIndex","setTonicIndex","value","onChange","e","parseInt","ScaleSelector","scaleName","setScaleName","entries","InstrumentSelector","currentInstrument","setCurrentInstrument","instrument","charAt","toUpperCase","FlattedNameToggle","useFlats","setUseFlats","type","checked","App","useState","className","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d24435f1.chunk.js","sourcesContent":["export class Note {\n    constructor(name, color, altName=null) {\n        this.name = name\n        this.color = color\n        this.altName = altName\n    }\n}\nconst Notes = [\n    new Note('C', '#ff0000'),\n    new Note('C♯', '#ff6600', 'D♭'),\n    new Note('D', '#ff9400'),\n    new Note('D♯', '#ffc500', 'E♭'),\n    new Note('E', '#ffff00'),\n    new Note('F', '#8cc700'),\n    new Note('F♯', '#0fad00', 'G♭'),\n    new Note('G', '#00a3c7'),\n    new Note('G♯', '#0064b5', 'A♭'),\n    new Note('A', '#0010a5'),\n    new Note('A♯', '#6300a5', 'B♭'),\n    new Note('B', '#c5007c')\n]\nconst noteIndices = Object.fromEntries(Notes.map((n,i)=>[n.name, i]))\nNotes.indexFor = name => noteIndices[name]\nexport default Notes\n\nfunction* sequence(tonic) {\n    let currentIndex = noteIndices[tonic]\n    yield Notes[currentIndex]\n    while (++currentIndex) {\n        yield Notes[currentIndex%Notes.length]\n    }\n}\nexport const NoteSequence = (tonic, number) => {\n    if (isNaN(number)) {\n        throw Error(`Expected a number of elements in the note sequence, but got '${number}' instead`)\n    }\n    const notes = []\n    let notesGenerated = 0\n    for (const note of sequence(tonic)) {\n        if (notesGenerated >= number) {\n            break\n        }\n        notes.push(note)\n        notesGenerated++\n    }\n    return notes\n}\n","export const LocationOfPointAt = (angle, radius, xOffset = 0, yOffset = 0) => {\n    const radians = angle * Math.PI / 180\n    return {\n        x: radius * Math.cos(radians) + xOffset,\n        y: radius * Math.sin(radians) + yOffset\n    }\n}\n\nexport const CenterTextOffset = ref => {\n    if (ref === null) {\n        return\n    }\n    ref.setOffset({x: ref.getWidth() / 2, y: ref.getHeight() / 2})\n}\n","import Notes from \"./Notes\";\n\nexport const wheelStageSideLength = 512\nexport const stageCenterPoint = wheelStageSideLength / 2\nexport const wedgeRadius = 192\nexport const labelDistanceFromCenter = wedgeRadius + 50\nexport const wedgeAngle = 360 / Notes.length\n\nexport const instrumentSettings = {\n    guitar: {\n        numFrets: 22,\n        strings: ['E', 'B', 'G', 'D', 'A', 'E'],\n        scaleLength: 1100,\n        stringSectionHeight: 25,\n        bindingHeight: 20,\n        nutWidth: 15,\n        heelWidth: 25,\n        fretWireWidth: 4,\n        fretMarkers: [3, 5, 7, 9, 12, 15, 17, 19, 21],\n        fretboardColor: '#f2e9cc'\n    },\n    bass: {\n        numFrets: 20,\n        strings: ['G', 'D', 'A', 'E'],\n        scaleLength: 1200,\n        stringSectionHeight: 40,\n        bindingHeight: 20,\n        nutWidth: 15,\n        heelWidth: 30,\n        fretWireWidth: 6,\n        fretMarkers: [1, 3, 5, 7, 9, 12, 15, 17, 19],\n        fretboardColor: '#f2e9cc'\n    },\n    uke: {\n        numFrets: 17,\n        strings: ['G', 'C', 'A', 'E'],\n        scaleLength: 1020,\n        stringSectionHeight: 30,\n        bindingHeight: 20,\n        heelWidth: 20,\n        nutWidth: 10,\n        fretWireWidth: 5,\n        fretMarkers: [5, 7, 10, 12, 15],\n        fretboardColor: '#f2e9cc'\n    }\n}","import {CenterTextOffset, LocationOfPointAt} from \"../util\";\nimport {Arrow, Group, Layer, Line, Text} from \"react-konva\";\nimport {stageCenterPoint, wedgeAngle, wedgeRadius} from \"../settings\";\nimport {useMemo} from \"react\";\nimport * as PropType from \"prop-types\";\n\nconst MakeLines = (points) => {\n    const lineProperties = pos => ({\n        listening: false,\n        points: [stageCenterPoint, stageCenterPoint, pos.x, pos.y],\n        fill: 'white',\n        stroke: 'white',\n        strokeWidth: 2,\n        shadowColor: 'black',\n        shadowBlur: 3,\n        shadowOffset: {\n            x: 0,\n            y: 0\n        }\n    })\n    const [firstNotePoint, ...notePoints] = points\n    const lines = notePoints.map(p =>\n        (\n            <Line\n                {...lineProperties(p.lineEnd)}\n                key={`${p.index}-line`}\n            />\n        )\n    )\n    const arrow = (<Arrow\n        {...lineProperties(firstNotePoint.lineEnd)}\n        key={`${firstNotePoint.index}-arrow`}\n        pointerLength={12}\n        pointerWidth={8}\n        radius={10}\n    />)\n    return [arrow, ...lines]\n}\n\nconst ScaleConstellation = ({scaleNoteIndices, labelOffset = 12}) => {\n    const points = useMemo(() => scaleNoteIndices.map(i => {\n        const rotation = -90 + wedgeAngle * i\n        return {\n            index: i,\n            lineEnd: LocationOfPointAt(rotation, wedgeRadius, stageCenterPoint, stageCenterPoint),\n            label: LocationOfPointAt(rotation, wedgeRadius + labelOffset, stageCenterPoint, stageCenterPoint)\n        }\n    }), [scaleNoteIndices, labelOffset])\n    const lines = MakeLines(points)\n    const labels = points.map((p, i) =>\n        (\n            <Text\n                x={p.label.x}\n                y={p.label.y}\n                text={i + 1}\n                key={`${p.label.x},${p.label.y}-label`}\n                fontSize={18}\n                fill='white'\n                stroke='black'\n                strokeWidth={1}\n                fillAfterStrokeEnabled={true}\n                shadowColor='black'\n                shadowBlur={4}\n                ref={CenterTextOffset}\n            />\n        ))\n    return (\n        <Layer id=\"scale-constellation\">\n            <Group>{lines}</Group>\n            <Group>{labels}</Group>\n        </Layer>\n    )\n}\nScaleConstellation.propTypes = {\n    scaleNoteIndices: PropType.array,\n    labelOffset: PropType.number\n}\nexport default ScaleConstellation","import {Wedge} from \"react-konva\";\nimport {Note} from \"../Notes\";\nimport React from 'react'\nimport PropTypes from \"prop-types\";\nimport {stageCenterPoint, wedgeAngle, wedgeRadius} from \"../settings\";\n\nconst ColorWheelWedge = React.forwardRef(({note, noteIndex, ...props}, ref) => {\n    const startRotation = -90 - (wedgeAngle / 2)\n    const rotation = startRotation + (wedgeAngle * noteIndex)\n    return (\n        <Wedge\n            {...props}\n            x={stageCenterPoint}\n            y={stageCenterPoint}\n            radius={wedgeRadius}\n            angle={wedgeAngle}\n            initialangle={wedgeAngle}\n            fill={note.color}\n            note={note}\n            rotation={rotation}\n            initialrotation={rotation}\n            scale={{x: 1, y: 1}}\n            opacity={1}\n            ref={ref}\n        />\n    )\n})\nColorWheelWedge.propTypes = {\n    note: PropTypes.instanceOf(Note).isRequired,\n    noteIndex: PropTypes.number.isRequired\n}\nexport default ColorWheelWedge\n","import Notes, {Note} from \"../Notes\";\nimport {Easings} from \"konva\";\nimport ColorWheelWedge from \"./ColorWheelWedge\";\nimport * as PropTypes from \"prop-types\";\nimport {wedgeAngle} from \"../settings\";\n\nconst HighlightWedge = ({activeNote}) => {\n    if (activeNote === null) {\n       return null\n    }\n    return (\n        <ColorWheelWedge\n            note={activeNote}\n            noteIndex={Notes.indexFor(activeNote.name)}\n            listening={false}\n            ref={n => {\n                if (n === null) {\n                    return\n                }\n                const scale = 1.15\n                const newAngle = n.attrs.initialangle * scale\n                const newRotation = n.attrs.initialrotation - (newAngle / 2) + (wedgeAngle / 2)\n                n.to({\n                    duration: 0.5,\n                    easing: Easings.ElasticEaseOut,\n                    scaleX: scale,\n                    scaleY: scale,\n                    angle: newAngle,\n                    rotation: newRotation\n                })\n            }}\n        />\n    )\n}\nHighlightWedge.propTypes = {\n    activeNote: PropTypes.instanceOf(Note)\n}\nexport default HighlightWedge\n","import {Group, Layer, Text} from \"react-konva\";\nimport {CenterTextOffset, LocationOfPointAt} from \"../util\";\nimport Notes, {Note} from \"../Notes\";\nimport React from \"react\";\nimport ColorWheelWedge from \"./ColorWheelWedge\";\nimport HighlightWedge from \"./HighlightWedge\";\nimport {labelDistanceFromCenter, stageCenterPoint, wedgeAngle} from \"../settings\";\nimport PropTypes from \"prop-types\";\n\nconst ColorWheel = ({activeNote, setActiveNote, getNoteName}) => {\n    const staticWedges = Notes.map((n, i) => (\n        <ColorWheelWedge\n            key={n.name}\n            note={n}\n            noteIndex={i}\n            onMouseOver={evt => setActiveNote(evt.target.attrs.note)}\n            onMouseOut={() => setActiveNote(null)}/>))\n    const labels = Notes.map((note, i) => {\n        const pos = LocationOfPointAt((-90 + (wedgeAngle * i)), labelDistanceFromCenter, stageCenterPoint, stageCenterPoint)\n\n        return (\n            <Text\n                key={note.name}\n                x={pos.x}\n                y={pos.y}\n                text={getNoteName(note)}\n                id={`label-${note.name}`}\n                fontSize={24}\n                fill={'black'}\n                ref={CenterTextOffset}/>\n        )\n    })\n    return (\n        <Layer id=\"color-wheel\">\n            <Group>{staticWedges}</Group>\n            <HighlightWedge activeNote={activeNote}/>\n            <Group>{labels}</Group>\n        </Layer>\n    )\n}\nColorWheel.propTypes = {\n    activeNote: PropTypes.instanceOf(Note),\n    setActiveNote: PropTypes.func.isRequired,\n    getNoteName: PropTypes.func.isRequired\n}\nexport default ColorWheel\n","const Scales = {\n    Acoustic: [0, 2, 4, 5, 6, 7, 9, 10],\n    'Natural Minor': [0, 2,3, 5, 7, 8, 10],\n    Algerian: [0, 2, 3, 6, 7, 8, 11],\n    Altered: [0, 1, 3, 4, 6, 8, 10],\n    Augmented: [0, 3, 4, 7, 9, 11],\n    'Bebop Dominant': [0, 2, 4, 5, 7, 9, 10, 11],\n    Blues: [0, 3, 5, 6, 7, 10],\n    Chromatic: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11],\n    'Double Harmonic': [0, 1, 4, 5, 7, 8, 11],\n    Enigmatic: [0, 1, 4, 6, 8, 10, 11],\n    Gypsy: [0, 2, 3, 6, 7, 8, 10],\n    'Half Diminshed': [0, 2, 3, 5, 6, 8, 10],\n    'Harmonic Major': [0, 2, 4, 5, 7, 8, 11],\n    'Harmonc Minor': [0, 2, 3, 5, 7, 8, 11],\n    Hirjoshi: [0, 2, 3, 7, 8],\n    'Hungarian Minor': [0, 2, 3, 6, 7, 8, 11],\n    Insen: [0, 1, 5, 7, 10],\n    Major: [0, 2, 4, 5, 7, 9, 11],\n    Istrian: [0, 1, 3, 4, 6, 7],\n    Iwato: [0, 1, 10, 5, 6],\n    'Major Pentatonic Scale': [0, 2, 4, 7, 9]\n}\nexport default Scales\n","import {Rect} from \"react-konva\";\nimport PropTypes from 'prop-types'\nimport {Note} from \"../Notes\";\n\nconst FretboardHighlightNotes = ({frettedNotesPerString, activeNote, stringIndex, stringHeight}) => {\n    if (!activeNote) {\n        return null\n    }\n    return frettedNotesPerString[stringIndex][activeNote.name].map((o, i) => (\n        <Rect\n            key={`active-note-${stringIndex + 1}-${i + 1}`}\n            {...o}\n            height={stringHeight}\n            fill={activeNote.color}\n            opacity={1}\n        />\n    ))\n\n}\nFretboardHighlightNotes.propTypes = {\n    frettedNotesPerString: PropTypes.array.isRequired,\n    activeNote: PropTypes.instanceOf(Note),\n    stringIndex: PropTypes.number.isRequired,\n    stringHeight: PropTypes.number.isRequired\n}\nexport default FretboardHighlightNotes\n","import {Rect} from \"react-konva\";\nimport PropTypes from \"prop-types\";\nimport {Note} from \"../Notes\";\n\nconst ColoredString = ({isInScale, stringNote, isActiveNote, stringIndex, width, height, stringSectionHeight}) => {\n    const stringFill = isInScale || isActiveNote ? stringNote.color : 'gray'\n    const stringStroke = isActiveNote ? stringNote.color : 'gray'\n    const stringBlur = isActiveNote ? 6 : 3\n\n    return (\n        <Rect\n            key={`string-${stringIndex + 1}`}\n            x={0}\n            y={stringSectionHeight / 2 + stringSectionHeight * stringIndex - height / 2}\n            width={width}\n            height={height}\n            fill={stringFill}\n            stroke={stringStroke}\n            strokeWidth={1}\n            shadowBlur={stringBlur}\n            shadowColor='black'\n            shadowEnabled={true}\n        />\n    )\n}\nColoredString.propTypes = {\n    isInScale: PropTypes.bool.isRequired,\n    isActiveNote: PropTypes.bool.isRequired,\n    stringNote: PropTypes.instanceOf(Note).isRequired,\n    stringIndex: PropTypes.number.isRequired,\n    width: PropTypes.number.isRequired,\n    height: PropTypes.number.isRequired,\n    stringSectionHeight: PropTypes.number.isRequired\n}\nexport default ColoredString","import {NoteSequence} from \"../Notes\";\nimport {Rect} from \"react-konva\";\nimport FretboardHighlightNotes from \"./FretboardHighlightNotes\";\nimport ColoredString from \"./ColoredString\";\n\nconst FretboardColoredNotes = ({\n                                   fretDistancesFromNut,\n                                   fretWidths,\n                                   frettedNotesPerString,\n                                   openStringNoteName,\n                                   stringIndex,\n                                   activeNote,\n                                   notesInScale,\n                                   stringWidth,\n                                   stringSectionHeight,\n                                   numFrets,\n                                   fretWireWidth,\n                                   padding\n                               }) => {\n    const [stringNote, ...frettedNotes] = NoteSequence(openStringNoteName, numFrets + 1).map((n, i) => ({\n        note: n,\n        position: i\n    })).filter((n, i) => notesInScale[n.note.name] || i === 0)\n\n    const y = stringSectionHeight * stringIndex\n    const fretNotes = frettedNotes.map(n => {\n        const fretDistance = fretDistancesFromNut[n.position - 1]\n        const thisFretWidth = fretWidths[n.position - 1]\n        const x = padding + fretDistance - thisFretWidth + fretWireWidth / 2\n        return (\n            <Rect\n                key={`fret-${stringIndex + 1}-${n.position}`}\n                x={x} y={y}\n                width={thisFretWidth - fretWireWidth}\n                height={stringSectionHeight}\n                fill={n.note.color}\n                opacity={0.75}\n            />\n        )\n    })\n\n    return (\n        <>\n            {fretNotes}\n            <ColoredString\n                width={stringWidth}\n                height={fretWireWidth}\n                stringIndex={stringIndex}\n                stringNote={stringNote.note}\n                stringSectionHeight={stringSectionHeight}\n                isInScale={notesInScale[stringNote.note.name] || false}\n                isActiveNote={(activeNote && activeNote.name === stringNote.note.name) || false}/>\n            <FretboardHighlightNotes\n                stringHeight={stringSectionHeight}\n                frettedNotesPerString={frettedNotesPerString}\n                activeNote={activeNote}\n                stringIndex={stringIndex}/>\n        </>\n    )\n}\nexport default FretboardColoredNotes\n","import {Rect} from \"react-konva\";\nimport PropTypes from 'prop-types'\n\nconst FretboardInlays = ({fretMarkerLocations, fretboardHeight, xOffset}) => (\n    fretMarkerLocations.map(fml => {\n        const inlayHeight = fretboardHeight * 2 / 3\n        const markerYOffset = (fretboardHeight - inlayHeight) / 2\n\n        return (\n            <Rect\n                key={`inlay-marker-${fml.markNumber}`}\n                x={fml.markerStart + xOffset}\n                y={markerYOffset}\n                height={inlayHeight}\n                width={fml.markerWidth}\n                fill='black'\n            />\n        )\n    }))\nFretboardInlays.propTypes = {\n    fretMarkerLocations: PropTypes.array.isRequired,\n    fretboardHeight: PropTypes.number.isRequired,\n    xOffset: PropTypes.number.isRequired\n}\nexport default FretboardInlays\n","import {Rect} from \"react-konva\";\nimport PropTypes from \"prop-types\";\n\nconst Frets = ({fretDistancesFromNut, xOffset, fretWireWidth, fretHeight}) => (\n    fretDistancesFromNut.map((f, i) => (\n            <Rect\n                name={`fret-${i + 1}`}\n                key={f}\n                x={xOffset + f - fretWireWidth / 2}\n                y={0}\n                width={fretWireWidth}\n                height={fretHeight}\n                fill='silver'/>\n        )\n    )\n)\nFrets.propTypes = {\n    fretDistancesFromNut: PropTypes.array.isRequired,\n    xOffset: PropTypes.number.isRequired,\n    fretWireWidth: PropTypes.number.isRequired,\n    fretHeight: PropTypes.number.isRequired\n}\nexport default Frets\n","import {Group, Rect} from \"react-konva\";\nimport * as PropType from \"prop-types\";\n\nconst FretboardBinding = ({height, width, xOffset, yOffset, fretMarkerLocations}) => {\n    return (\n        <>\n            <Rect\n                name=\"binding\"\n                x={xOffset}\n                y={yOffset}\n                width={width}\n                height={height}\n                fill=\"black\"/>\n            {\n                fretMarkerLocations.map(fml => {\n                    const markerHeight = height / 2\n                    const markerY = yOffset + markerHeight / 2\n\n                    // if the marker is for an octave fret, we want to make 2 of them instead of 1\n                    if (fml.markNumber % 12 === 0) {\n                        const octaveWidth = fml.markerWidth / 3\n                        const secondMarkerX = fml.markerStart + 2 * octaveWidth\n                        return (\n                            <Group key={`binding-octave-${fml.markNumber}`}>\n                                <Rect\n                                    x={fml.markerStart + xOffset}\n                                    y={markerY}\n                                    height={markerHeight}\n                                    width={octaveWidth}\n                                    fill='white'\n                                />\n                                <Rect\n                                    x={secondMarkerX + xOffset}\n                                    y={markerY}\n                                    height={markerHeight}\n                                    width={octaveWidth}\n                                    fill='white'\n                                />\n                            </Group>\n                        )\n                    }\n                    return (\n                        <Rect\n                            key={`binding-marker-${fml.markNumber}`}\n                            x={fml.markerStart + xOffset}\n                            y={markerY}\n                            height={markerHeight}\n                            width={fml.markerWidth}\n                            fill='white'\n                        />\n                    )\n                })\n            }\n        </>\n    )\n}\nFretboardBinding.propTypes = {\n    height: PropType.number.isRequired,\n    width: PropType.number.isRequired,\n    xOffset: PropType.number.isRequired,\n    yOffset: PropType.number.isRequired,\n    fretMarkerLocations: PropType.array.isRequired\n}\nexport default FretboardBinding\n","import {Group, Rect, Shape} from \"react-konva\";\nimport FretboardInlays from \"./FretboardInlays\";\nimport Frets from \"./Frets\";\nimport FretboardBinding from \"./FretboardBinding\";\n\nconst Fretboard = ({\n                       height,\n                       bindingHeight,\n                       width,\n                       displayWidth,\n                       nutWidth,\n                       fretWireWidth,\n                       boardColor,\n                       fretMarkerLocations,\n                       fretDistancesFromNut\n                   }) => {\n    return (\n        <Group>\n            <Rect\n                name=\"nut\"\n                x={0}\n                y={0}\n                width={nutWidth}\n                height={height} fill='black'/>\n\n            <Rect\n                name=\"fingerboard\"\n                x={nutWidth}\n                y={0}\n                width={width}\n                height={height}\n                fill={boardColor}/>\n            <Shape\n                name=\"neck-heel\"\n                sceneFunc={(ctx, shape) => {\n                    ctx.beginPath();\n                    ctx.moveTo(width + nutWidth, 0);\n                    ctx.bezierCurveTo(\n                        displayWidth,\n                        0,\n                        displayWidth,\n                        height,\n                        width + nutWidth,\n                        height\n                    );\n                    ctx.closePath();\n                    ctx.fillStrokeShape(shape);\n                }}\n                fill={boardColor}/>\n\n            <FretboardInlays\n                xOffset={nutWidth}\n                fretboardHeight={height}\n                fretMarkerLocations={fretMarkerLocations}/>\n            <Frets\n                xOffset={nutWidth}\n                fretDistancesFromNut={fretDistancesFromNut}\n                fretWireWidth={fretWireWidth}\n                fretHeight={height}/>\n            <FretboardBinding\n                height={bindingHeight}\n                width={width}\n                xOffset={nutWidth}\n                yOffset={height}\n                fretMarkerLocations={fretMarkerLocations}/>\n        </Group>\n    )\n}\nexport default Fretboard\n","import Notes, {NoteSequence} from \"../Notes\";\nimport {Group, Layer, Stage} from \"react-konva\";\nimport {useMemo} from \"react\";\nimport FretboardColoredNotes from \"./FretboardColoredNotes\";\nimport Fretboard from \"./Fretboard\";\n\n// Precompute things like fret distances and widths, fret marker locations, and the position of each note on the fretboard\n// Without doing this upfront (and memoizing it!), performance tanks when changing the active note\nconst instrumentData = instrumentSettings => {\n    // the distance from the nut to fret n = L(1-2^frac{-n}{12}) where L is scale length\n    const fretDistancesFromNut = Array.from({length: instrumentSettings.numFrets}, (_, i) => i).map(i => instrumentSettings.scaleLength * (1 - Math.pow(2, -(i + 1) / 12)))\n    const fretWidths = [fretDistancesFromNut[0], ...fretDistancesFromNut.slice(1).map((d, i) => d - fretDistancesFromNut[i])]\n\n    const [totalDistance] = fretDistancesFromNut.slice(-1)\n    const fretMarkerLocations = instrumentSettings.fretMarkers.map(fm => {\n        const fretDistance = fretDistancesFromNut[fm - 1]\n        const fretWidth = fretWidths[fm - 1]\n        return {\n            markNumber: fm,\n            markerStart: (fretDistance - fretWidth) + (fretWidth / 4),\n            markerWidth: fretWidth / 2\n        }\n    })\n\n    // precompute the position of each note on the fretboard, then store it per string\n    const frettedNotesPerString = []\n    const notePositionsPerString = instrumentSettings.strings.map(openNoteName => {\n        return NoteSequence(openNoteName, instrumentSettings.numFrets + 1).map((n, i) => ({note: n, position: i}))\n    })\n    for (let string = 0; string < notePositionsPerString.length; string++) {\n        const frettedNotes = notePositionsPerString[string].slice(1)\n        const notesByLocation = {}\n        const y = instrumentSettings.stringSectionHeight * string\n        for (let n = 0; n < frettedNotes.length; n++) {\n            const sn = frettedNotes[n]\n            if (!notesByLocation[sn.note.name]) {\n                notesByLocation[sn.note.name] = []\n            }\n            const fretDistance = fretDistancesFromNut[sn.position - 1]\n            const fretWidth = fretWidths[sn.position - 1]\n            const x = fretDistance - fretWidth + instrumentSettings.fretWireWidth / 2 + instrumentSettings.nutWidth\n            notesByLocation[sn.note.name].push({\n                x, y, width: fretWidth - instrumentSettings.fretWireWidth\n            })\n        }\n        frettedNotesPerString.push(notesByLocation)\n    }\n\n    return {\n        fretWidths, fretDistancesFromNut, totalDistance, frettedNotesPerString, fretMarkerLocations\n    }\n}\n\nexport const FrettedInstrument = ({scaleNoteIndices, activeNote, instrumentSettings}) => {\n    const data = useMemo(() => instrumentData(instrumentSettings), [instrumentSettings])\n    const totalDistance = data.totalDistance\n    const fretboardHeight = instrumentSettings.strings.length * instrumentSettings.stringSectionHeight\n\n    const displayWidth = totalDistance + instrumentSettings.nutWidth + instrumentSettings.heelWidth\n    const displayHeight = fretboardHeight + instrumentSettings.bindingHeight\n\n    const notesInScale = Object.fromEntries(scaleNoteIndices.map(ni => [Notes[ni].name, true]))\n    return (\n        <Stage width={displayWidth} height={displayHeight}>\n            <Layer>\n                <Fretboard\n                    fretDistancesFromNut={data.fretDistancesFromNut}\n                    width={totalDistance}\n                    displayWidth={displayWidth}\n                    nutWidth={instrumentSettings.nutWidth}\n                    fretWireWidth={instrumentSettings.fretWireWidth}\n                    bindingHeight={instrumentSettings.bindingHeight}\n                    boardColor={instrumentSettings.fretboardColor}\n                    height={fretboardHeight}\n                    fretMarkerLocations={data.fretMarkerLocations}/>\n                <Group>\n                    {\n                        instrumentSettings.strings.map((sn, i) => (\n                            <FretboardColoredNotes\n                                frettedNotesPerString={data.frettedNotesPerString}\n                                fretDistancesFromNut={data.fretDistancesFromNut}\n                                fretWidths={data.fretWidths}\n                                fretWireWidth={instrumentSettings.fretWireWidth}\n                                numFrets={instrumentSettings.numFrets}\n                                padding={instrumentSettings.nutWidth}\n                                stringSectionHeight={instrumentSettings.stringSectionHeight}\n                                key={`string-${i + 1}-${sn}`}\n                                stringIndex={i}\n                                activeNote={activeNote}\n                                notesInScale={notesInScale}\n                                openStringNoteName={sn}\n                                stringWidth={displayWidth}/>\n                        ))\n                    }\n                </Group>\n            </Layer>\n        </Stage>\n    )\n}","import Notes from \"../Notes\";\nimport PropTypes from \"prop-types\";\n\nconst TonicSelector = ({tonicIndex, setTonicIndex, getNoteName}) => (\n    <select id=\"tonic\" value={tonicIndex} onChange={e => setTonicIndex(parseInt(e.target.value, 10))}>\n        {\n            Notes.map((note, i) => (\n                <option key={note.name} value={i}>{getNoteName(note)}</option>\n            ))\n        }\n    </select>\n)\nTonicSelector.propTypes = {\n    tonicIndex: PropTypes.number.isRequired,\n    setTonicIndex: PropTypes.func.isRequired,\n    getNoteName: PropTypes.func.isRequired\n}\nexport default TonicSelector\n","import Scales from \"../Scales\";\nimport PropTypes from \"prop-types\";\n\nconst ScaleSelector = ({scaleName, setScaleName}) => (\n    <select id=\"scale\" value={scaleName} onChange={e => setScaleName(e.target.value)}>\n        {\n            Object.entries(Scales).map(([scaleName, _]) => (\n                <option key={scaleName} value={scaleName}>{scaleName}</option>\n            ))\n        }\n    </select>\n)\nScaleSelector.propTypes = {\n    scaleName: PropTypes.string.isRequired,\n    setScaleName: PropTypes.func.isRequired\n}\nexport default ScaleSelector\n","import {instrumentSettings} from \"../settings\";\nimport PropTypes from \"prop-types\";\n\nconst InstrumentSelector = ({currentInstrument, setCurrentInstrument}) => (\n    <select id=\"instrument\" value={currentInstrument} onChange={e => setCurrentInstrument(e.target.value)}>\n        {\n            Object.entries(instrumentSettings).map(([instrument, _]) => (\n                <option key={instrument} value={instrument}>\n                    {instrument.charAt(0).toUpperCase() + instrument.slice(1)}\n                </option>\n            ))\n        }\n    </select>\n)\nInstrumentSelector.propTypes = {\n    currentInstrument: PropTypes.string.isRequired,\n    setCurrentInstrument: PropTypes.func.isRequired\n}\nexport default InstrumentSelector\n","import PropTypes from \"prop-types\";\n\nconst FlattedNameToggle = ({useFlats, setUseFlats}) => (\n    <label>\n        <input type=\"checkbox\" checked={useFlats} onChange={() => setUseFlats(!useFlats)}/>\n        Show Flats\n    </label>\n)\nFlattedNameToggle.propTypes = {\n    useFlats: PropTypes.bool.isRequired,\n    setUseFlats: PropTypes.func.isRequired\n}\nexport default FlattedNameToggle\n","import './App.css';\nimport {Stage} from 'react-konva'\nimport Notes from \"./Notes\";\nimport ScaleConstellation from \"./components/ScaleConstellation\";\nimport ColorWheel from \"./components/ColorWheel\";\nimport React, {useMemo, useState} from \"react\";\nimport Scales from \"./Scales\";\nimport {FrettedInstrument} from \"./components/FrettedInstrument\";\nimport {instrumentSettings, wheelStageSideLength} from \"./settings\";\nimport TonicSelector from \"./components/TonicSelector\";\nimport ScaleSelector from \"./components/ScaleSelector\";\nimport InstrumentSelector from \"./components/InstrumentSelector\";\nimport FlattedNameToggle from \"./components/FlattedNameToggle\";\n\nfunction App() {\n    const [tonicIndex, setTonicIndex] = useState(0)\n    const [scaleName, setScaleName] = useState('Major')\n    const [useFlats, setUseFlats] = useState(false)\n    const [activeNote, setActiveNote] = useState(null)\n    const [currentInstrument, setCurrentInstrument] = useState('guitar')\n\n    const getNoteName = useMemo(() => note => (useFlats && note.altName) || note.name, [useFlats])\n    const scale = useMemo(() => Scales[scaleName].map(ni => (ni + tonicIndex) % Notes.length), [scaleName, tonicIndex])\n\n    return (\n        <div className=\"App\">\n            <div id=\"option-selections\">\n                <TonicSelector\n                    getNoteName={getNoteName}\n                    setTonicIndex={setTonicIndex}\n                    tonicIndex={tonicIndex}/>\n                <ScaleSelector\n                    setScaleName={setScaleName}\n                    scaleName={scaleName}/>\n                <InstrumentSelector\n                    setCurrentInstrument={setCurrentInstrument}\n                    currentInstrument={currentInstrument}/>\n                <FlattedNameToggle\n                    setUseFlats={setUseFlats}\n                    useFlats={useFlats}/>\n            </div>\n            <Stage width={wheelStageSideLength} height={wheelStageSideLength}>\n                <ColorWheel\n                    getNoteName={getNoteName}\n                    setActiveNote={setActiveNote}\n                    activeNote={activeNote}/>\n                <ScaleConstellation scaleNoteIndices={scale}/>\n            </Stage>\n            <FrettedInstrument\n                scaleNoteIndices={scale}\n                activeNote={activeNote}\n                instrumentSettings={instrumentSettings[currentInstrument]}/>\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}