{"version":3,"sources":["util.js","Notes.js","settings.js","Scales.js","components/ScaleConstellation.js","components/ColorWheelWedge.js","components/HighlightWedge.js","actions.js","components/ColorWheel.js","components/FretboardHighlightNotes.js","components/ColoredString.js","components/FretboardColoredNotes.js","components/FretboardInlays.js","components/Frets.js","components/FretboardBinding.js","components/Fretboard.js","components/ReduxStage.js","components/FrettedInstrument.js","components/TonicSelector.js","components/ScaleSelector.js","components/InstrumentSelector.js","components/FlattedNameToggle.js","components/Options.js","App.js","reducer.js","store.js","index.js"],"names":["LocationOfPointAt","angle","radius","xOffset","yOffset","radians","Math","PI","x","cos","y","sin","CenterTextOffset","ref","setOffset","getWidth","getHeight","sequence","Note","name","color","altName","this","useFlats","Notes","noteIndices","Object","fromEntries","map","n","i","indexFor","tonic","currentIndex","length","NoteSequence","number","isNaN","Error","notes","notesGenerated","note","push","stageCenterPoint","wheelStageSideLength","wedgeRadius","wedgeAngle","instrumentSettings","guitar","numFrets","strings","scaleLength","stringSectionHeight","bindingHeight","nutWidth","heelWidth","fretWireWidth","fretMarkers","fretboardColor","bass","uke","Scale","noteIndexArray","tonicIndex","ni","Scales","entries","Acoustic","Algerian","Altered","Augmented","Blues","Chromatic","Enigmatic","Gypsy","Hirjoshi","Insen","Major","Istrian","Iwato","k","v","ScaleConstellation","labelOffset","scaleName","useSelector","s","scaleNoteIndices","forTonic","points","useMemo","rotation","index","lineEnd","label","lines","lineProperties","pos","listening","fill","stroke","strokeWidth","shadowColor","shadowBlur","shadowOffset","firstNotePoint","p","key","pointerLength","pointerWidth","MakeLines","labels","text","fontSize","fillAfterStrokeEnabled","id","ColorWheelWedge","React","forwardRef","noteIndex","props","initialangle","initialrotation","scale","opacity","HighlightWedge","activeNote","newAngle","attrs","newRotation","to","duration","easing","Easings","ElasticEaseOut","scaleX","scaleY","TONIC_CHANGED","SCALE_CHANGED","FLATS_CHANGED","SELECTED_NOTE_CHANGED","INSTRUMENT_CHANGED","changeSelectedNote","selected","type","ColorWheel","selectedNote","dispatch","useDispatch","staticWedges","onMouseOver","evt","target","onMouseOut","displayName","FretboardHighlightNotes","frettedNotesPerString","stringIndex","stringHeight","o","height","ColoredString","isInScale","stringNote","isActiveNote","width","stringFill","stringStroke","stringBlur","shadowEnabled","FretboardColoredNotes","fretDistancesFromNut","fretWidths","openStringNoteName","notesInScale","stringWidth","padding","position","filter","frettedNotes","fretNotes","fretDistance","thisFretWidth","FretboardInlays","fretMarkerLocations","fretboardHeight","fml","inlayHeight","markerYOffset","markerStart","markerWidth","markNumber","Frets","fretHeight","f","FretboardBinding","markerHeight","markerY","octaveWidth","secondMarkerX","Fretboard","displayWidth","boardColor","sceneFunc","ctx","shape","beginPath","moveTo","bezierCurveTo","closePath","fillStrokeShape","ReduxStage","children","stageWidth","stageHeight","Consumer","store","FrettedInstrument","currentInstrument","instrument","settings","data","Array","from","_","pow","slice","d","totalDistance","fm","fretWidth","notePositionsPerString","openNoteName","string","notesByLocation","sn","instrumentData","displayHeight","TonicSelector","value","onChange","e","parseInt","ScaleSelector","InstrumentSelector","charAt","toUpperCase","FlattedNameToggle","checked","changeFlats","Options","App","className","initialState","createStore","state","action","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ae7ef752.chunk.js","sourcesContent":["export const LocationOfPointAt = (angle, radius, xOffset = 0, yOffset = 0) => {\n    const radians = angle * Math.PI / 180\n    return {\n        x: radius * Math.cos(radians) + xOffset,\n        y: radius * Math.sin(radians) + yOffset\n    }\n}\n\nexport const CenterTextOffset = ref => {\n    if (ref === null) {\n        return\n    }\n    ref.setOffset({x: ref.getWidth() / 2, y: ref.getHeight() / 2})\n}\n","export class Note {\n    constructor(name, color, altName=null) {\n        this.name = name\n        this.color = color\n        this.altName = altName\n    }\n\n    displayName(useFlats) {\n        return (useFlats && this.altName) || this.name\n    }\n}\nconst Notes = [\n    new Note('C', '#ff0000'),\n    new Note('C♯', '#ff6600', 'D♭'),\n    new Note('D', '#ff9400'),\n    new Note('D♯', '#ffc500', 'E♭'),\n    new Note('E', '#ffff00'),\n    new Note('F', '#8cc700'),\n    new Note('F♯', '#0fad00', 'G♭'),\n    new Note('G', '#00a3c7'),\n    new Note('G♯', '#0064b5', 'A♭'),\n    new Note('A', '#0010a5'),\n    new Note('A♯', '#6300a5', 'B♭'),\n    new Note('B', '#c5007c')\n]\nconst noteIndices = Object.fromEntries(Notes.map((n,i)=>[n.name, i]))\nNotes.indexFor = name => noteIndices[name]\nexport default Notes\n\nfunction* sequence(tonic) {\n    let currentIndex = noteIndices[tonic]\n    yield Notes[currentIndex]\n    while (++currentIndex) {\n        yield Notes[currentIndex%Notes.length]\n    }\n}\nexport const NoteSequence = (tonic, number) => {\n    if (isNaN(number)) {\n        throw Error(`Expected a number of elements in the note sequence, but got '${number}' instead`)\n    }\n    const notes = []\n    let notesGenerated = 0\n    for (const note of sequence(tonic)) {\n        if (notesGenerated >= number) {\n            break\n        }\n        notes.push(note)\n        notesGenerated++\n    }\n    return notes\n}\n","import Notes from \"./Notes\";\n\nexport const wheelStageSideLength = 512\nexport const stageCenterPoint = wheelStageSideLength / 2\nexport const wedgeRadius = 192\nexport const labelDistanceFromCenter = wedgeRadius + 50\nexport const wedgeAngle = 360 / Notes.length\n\nexport const instrumentSettings = {\n    guitar: {\n        numFrets: 22,\n        strings: ['E', 'B', 'G', 'D', 'A', 'E'],\n        scaleLength: 1100,\n        stringSectionHeight: 25,\n        bindingHeight: 20,\n        nutWidth: 15,\n        heelWidth: 25,\n        fretWireWidth: 4,\n        fretMarkers: [3, 5, 7, 9, 12, 15, 17, 19, 21],\n        fretboardColor: '#f2e9cc'\n    },\n    bass: {\n        numFrets: 20,\n        strings: ['G', 'D', 'A', 'E'],\n        scaleLength: 1200,\n        stringSectionHeight: 40,\n        bindingHeight: 20,\n        nutWidth: 15,\n        heelWidth: 30,\n        fretWireWidth: 6,\n        fretMarkers: [1, 3, 5, 7, 9, 12, 15, 17, 19],\n        fretboardColor: '#f2e9cc'\n    },\n    uke: {\n        numFrets: 17,\n        strings: ['G', 'C', 'A', 'E'],\n        scaleLength: 1020,\n        stringSectionHeight: 30,\n        bindingHeight: 20,\n        heelWidth: 20,\n        nutWidth: 10,\n        fretWireWidth: 5,\n        fretMarkers: [5, 7, 10, 12, 15],\n        fretboardColor: '#f2e9cc'\n    }\n}","import Notes from \"./Notes\";\n\nexport class Scale {\n    constructor(noteIndexArray) {\n        this.notes = noteIndexArray\n    }\n\n    forTonic(tonicIndex) {\n        return this.notes.map(ni => (ni + tonicIndex) % Notes.length)\n    }\n}\n\nconst scalePositions = {\n    '-None-': [],\n    Acoustic: [0, 2, 4, 5, 6, 7, 9, 10],\n    'Natural Minor': [0, 2, 3, 5, 7, 8, 10],\n    Algerian: [0, 2, 3, 6, 7, 8, 11],\n    Altered: [0, 1, 3, 4, 6, 8, 10],\n    Augmented: [0, 3, 4, 7, 9, 11],\n    'Bebop Dominant': [0, 2, 4, 5, 7, 9, 10, 11],\n    Blues: [0, 3, 5, 6, 7, 10],\n    Chromatic: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11],\n    'Double Harmonic': [0, 1, 4, 5, 7, 8, 11],\n    Enigmatic: [0, 1, 4, 6, 8, 10, 11],\n    Gypsy: [0, 2, 3, 6, 7, 8, 10],\n    'Half Diminshed': [0, 2, 3, 5, 6, 8, 10],\n    'Harmonic Major': [0, 2, 4, 5, 7, 8, 11],\n    'Harmonc Minor': [0, 2, 3, 5, 7, 8, 11],\n    Hirjoshi: [0, 2, 3, 7, 8],\n    'Hungarian Minor': [0, 2, 3, 6, 7, 8, 11],\n    Insen: [0, 1, 5, 7, 10],\n    Major: [0, 2, 4, 5, 7, 9, 11],\n    Istrian: [0, 1, 3, 4, 6, 7],\n    Iwato: [0, 1, 10, 5, 6],\n    'Major Pentatonic Scale': [0, 2, 4, 7, 9]\n}\nconst Scales = Object.fromEntries(Object.entries(scalePositions).map(([k, v]) => [k, new Scale(v)]))\nexport default Scales\n","import {CenterTextOffset, LocationOfPointAt} from \"../util\";\nimport {Arrow, Group, Layer, Line, Text} from \"react-konva\";\nimport {stageCenterPoint, wedgeAngle, wedgeRadius} from \"../settings\";\nimport {useMemo} from \"react\";\nimport * as PropType from \"prop-types\";\nimport {useSelector} from \"react-redux\";\nimport Scales from \"../Scales\";\n\nconst MakeLines = (points) => {\n    const lineProperties = pos => ({\n        listening: false,\n        points: [stageCenterPoint, stageCenterPoint, pos.x, pos.y],\n        fill: 'white',\n        stroke: 'white',\n        strokeWidth: 2,\n        shadowColor: 'black',\n        shadowBlur: 3,\n        shadowOffset: {\n            x: 0,\n            y: 0\n        }\n    })\n    const [firstNotePoint, ...notePoints] = points\n    const lines = notePoints.map(p =>\n        (\n            <Line\n                {...lineProperties(p.lineEnd)}\n                key={`${p.index}-line`}\n            />\n        )\n    )\n    const arrow = (<Arrow\n        {...lineProperties(firstNotePoint.lineEnd)}\n        key={`${firstNotePoint.index}-arrow`}\n        pointerLength={12}\n        pointerWidth={8}\n        radius={10}\n    />)\n    return [arrow, ...lines]\n}\n\nconst ScaleConstellation = ({labelOffset = 12}) => {\n    const scaleName = useSelector(s => s.scaleName)\n    const tonicIndex = useSelector(s => s.tonicIndex)\n    const scaleNoteIndices = Scales[scaleName].forTonic(tonicIndex)\n    const points = useMemo(() => scaleNoteIndices.map(i => {\n        const rotation = -90 + wedgeAngle * i\n        return {\n            index: i,\n            lineEnd: LocationOfPointAt(rotation, wedgeRadius, stageCenterPoint, stageCenterPoint),\n            label: LocationOfPointAt(rotation, wedgeRadius + labelOffset, stageCenterPoint, stageCenterPoint)\n        }\n    }), [scaleNoteIndices, labelOffset])\n    if (points.length === 0) {\n        return null\n    }\n\n    const lines = MakeLines(points)\n    const labels = points.map((p, i) =>\n        (\n            <Text\n                x={p.label.x}\n                y={p.label.y}\n                text={i + 1}\n                key={`${p.label.x},${p.label.y}-label`}\n                fontSize={18}\n                fill='white'\n                stroke='black'\n                strokeWidth={1}\n                fillAfterStrokeEnabled={true}\n                shadowColor='black'\n                shadowBlur={4}\n                ref={CenterTextOffset}\n            />\n        ))\n    return (\n        <Layer id=\"scale-constellation\">\n            <Group>{lines}</Group>\n            <Group>{labels}</Group>\n        </Layer>\n    )\n}\nScaleConstellation.propTypes = {\n    labelOffset: PropType.number\n}\nexport default ScaleConstellation","import {Wedge} from \"react-konva\";\nimport {Note} from \"../Notes\";\nimport React from 'react'\nimport PropTypes from \"prop-types\";\nimport {stageCenterPoint, wedgeAngle, wedgeRadius} from \"../settings\";\n\nconst ColorWheelWedge = React.forwardRef(({note, noteIndex, ...props}, ref) => {\n    const startRotation = -90 - (wedgeAngle / 2)\n    const rotation = startRotation + (wedgeAngle * noteIndex)\n    return (\n        <Wedge\n            {...props}\n            x={stageCenterPoint}\n            y={stageCenterPoint}\n            radius={wedgeRadius}\n            angle={wedgeAngle}\n            initialangle={wedgeAngle}\n            fill={note.color}\n            note={note}\n            rotation={rotation}\n            initialrotation={rotation}\n            scale={{x: 1, y: 1}}\n            opacity={1}\n            ref={ref}\n        />\n    )\n})\nColorWheelWedge.propTypes = {\n    note: PropTypes.instanceOf(Note).isRequired,\n    noteIndex: PropTypes.number.isRequired\n}\nexport default ColorWheelWedge\n","import Notes, {Note} from \"../Notes\";\nimport {Easings} from \"konva\";\nimport ColorWheelWedge from \"./ColorWheelWedge\";\nimport * as PropTypes from \"prop-types\";\nimport {wedgeAngle} from \"../settings\";\n\nconst HighlightWedge = ({activeNote}) => {\n    if (activeNote === null) {\n       return null\n    }\n    return (\n        <ColorWheelWedge\n            note={activeNote}\n            noteIndex={Notes.indexFor(activeNote.name)}\n            listening={false}\n            ref={n => {\n                if (n === null) {\n                    return\n                }\n                const scale = 1.15\n                const newAngle = n.attrs.initialangle * scale\n                const newRotation = n.attrs.initialrotation - (newAngle / 2) + (wedgeAngle / 2)\n                n.to({\n                    duration: 0.5,\n                    easing: Easings.ElasticEaseOut,\n                    scaleX: scale,\n                    scaleY: scale,\n                    angle: newAngle,\n                    rotation: newRotation\n                })\n            }}\n        />\n    )\n}\nHighlightWedge.propTypes = {\n    activeNote: PropTypes.instanceOf(Note)\n}\nexport default HighlightWedge\n","export const TONIC_CHANGED = 'tonic/changed'\nexport const SCALE_CHANGED = 'scale/changed'\nexport const FLATS_CHANGED = 'flats/changed'\nexport const SELECTED_NOTE_CHANGED = 'selectedNote/changed'\nexport const INSTRUMENT_CHANGED = 'instrument/changed'\n\nexport const changeTonic = index => (\n    {\n        type: TONIC_CHANGED,\n        index\n    }\n)\n\nexport const changeScale = scale => (\n    {\n        type: SCALE_CHANGED,\n        scale\n    }\n)\n\nexport const changeFlats = useFlats => (\n    {\n        type: FLATS_CHANGED,\n        useFlats\n    }\n)\n\nexport const changeSelectedNote = selected => (\n    {\n        type: SELECTED_NOTE_CHANGED,\n        selected\n    }\n)\n\nexport const changeInstrument = instrument => (\n    {\n        type: INSTRUMENT_CHANGED,\n        instrument\n    }\n)\n","import {Group, Layer, Text} from \"react-konva\";\nimport {CenterTextOffset, LocationOfPointAt} from \"../util\";\nimport Notes from \"../Notes\";\nimport React from \"react\";\nimport ColorWheelWedge from \"./ColorWheelWedge\";\nimport HighlightWedge from \"./HighlightWedge\";\nimport {labelDistanceFromCenter, stageCenterPoint, wedgeAngle} from \"../settings\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {changeSelectedNote} from \"../actions\";\n\nconst ColorWheel = () => {\n    const activeNote = useSelector(s => s.selectedNote)\n    const useFlats = useSelector(s => s.useFlats)\n    const dispatch = useDispatch()\n    const staticWedges = Notes.map((n, i) => (\n        <ColorWheelWedge\n            key={n.name}\n            note={n}\n            noteIndex={i}\n            onMouseOver={evt => dispatch(changeSelectedNote(evt.target.attrs.note))}\n            onMouseOut={() => dispatch(changeSelectedNote(null))}/>))\n    const labels = Notes.map((note, i) => {\n        const pos = LocationOfPointAt((-90 + (wedgeAngle * i)), labelDistanceFromCenter, stageCenterPoint, stageCenterPoint)\n\n        return (\n            <Text\n                key={note.name}\n                x={pos.x}\n                y={pos.y}\n                text={note.displayName(useFlats)}\n                id={`label-${note.name}`}\n                fontSize={24}\n                fill={'black'}\n                ref={CenterTextOffset}/>\n        )\n    })\n    return (\n        <Layer id=\"color-wheel\">\n            <Group>{staticWedges}</Group>\n            <HighlightWedge activeNote={activeNote}/>\n            <Group>{labels}</Group>\n        </Layer>\n    )\n}\nexport default ColorWheel\n","import {Rect} from \"react-konva\";\nimport PropTypes from 'prop-types'\nimport {Note} from \"../Notes\";\n\nconst FretboardHighlightNotes = ({frettedNotesPerString, activeNote, stringIndex, stringHeight}) => {\n    if (!activeNote) {\n        return null\n    }\n    return frettedNotesPerString[stringIndex][activeNote.name].map((o, i) => (\n        <Rect\n            key={`active-note-${stringIndex + 1}-${i + 1}`}\n            {...o}\n            height={stringHeight}\n            fill={activeNote.color}\n            opacity={1}\n        />\n    ))\n\n}\nFretboardHighlightNotes.propTypes = {\n    frettedNotesPerString: PropTypes.array.isRequired,\n    activeNote: PropTypes.instanceOf(Note),\n    stringIndex: PropTypes.number.isRequired,\n    stringHeight: PropTypes.number.isRequired\n}\nexport default FretboardHighlightNotes\n","import {Rect} from \"react-konva\";\nimport PropTypes from \"prop-types\";\nimport {Note} from \"../Notes\";\n\nconst ColoredString = ({isInScale, stringNote, isActiveNote, stringIndex, width, height, stringSectionHeight}) => {\n    const stringFill = isInScale || isActiveNote ? stringNote.color : 'gray'\n    const stringStroke = isActiveNote ? stringNote.color : 'gray'\n    const stringBlur = isActiveNote ? 6 : 3\n\n    return (\n        <Rect\n            key={`string-${stringIndex + 1}`}\n            x={0}\n            y={stringSectionHeight / 2 + stringSectionHeight * stringIndex - height / 2}\n            width={width}\n            height={height}\n            fill={stringFill}\n            stroke={stringStroke}\n            strokeWidth={1}\n            shadowBlur={stringBlur}\n            shadowColor='black'\n            shadowEnabled={true}\n        />\n    )\n}\nColoredString.propTypes = {\n    isInScale: PropTypes.bool.isRequired,\n    isActiveNote: PropTypes.bool.isRequired,\n    stringNote: PropTypes.instanceOf(Note).isRequired,\n    stringIndex: PropTypes.number.isRequired,\n    width: PropTypes.number.isRequired,\n    height: PropTypes.number.isRequired,\n    stringSectionHeight: PropTypes.number.isRequired\n}\nexport default ColoredString","import {NoteSequence} from \"../Notes\";\nimport {Rect} from \"react-konva\";\nimport FretboardHighlightNotes from \"./FretboardHighlightNotes\";\nimport ColoredString from \"./ColoredString\";\n\nconst FretboardColoredNotes = ({\n                                   fretDistancesFromNut,\n                                   fretWidths,\n                                   frettedNotesPerString,\n                                   openStringNoteName,\n                                   stringIndex,\n                                   activeNote,\n                                   notesInScale,\n                                   stringWidth,\n                                   stringSectionHeight,\n                                   numFrets,\n                                   fretWireWidth,\n                                   padding\n                               }) => {\n    const [stringNote, ...frettedNotes] = NoteSequence(openStringNoteName, numFrets + 1).map((n, i) => ({\n        note: n,\n        position: i\n    })).filter((n, i) => notesInScale[n.note.name] || i === 0)\n\n    const y = stringSectionHeight * stringIndex\n    const fretNotes = frettedNotes.map(n => {\n        const fretDistance = fretDistancesFromNut[n.position - 1]\n        const thisFretWidth = fretWidths[n.position - 1]\n        const x = padding + fretDistance - thisFretWidth + fretWireWidth / 2\n        return (\n            <Rect\n                key={`fret-${stringIndex + 1}-${n.position}`}\n                x={x} y={y}\n                width={thisFretWidth - fretWireWidth}\n                height={stringSectionHeight}\n                fill={n.note.color}\n                opacity={0.75}\n            />\n        )\n    })\n\n    return (\n        <>\n            {fretNotes}\n            <ColoredString\n                width={stringWidth}\n                height={fretWireWidth}\n                stringIndex={stringIndex}\n                stringNote={stringNote.note}\n                stringSectionHeight={stringSectionHeight}\n                isInScale={notesInScale[stringNote.note.name] || false}\n                isActiveNote={(activeNote && activeNote.name === stringNote.note.name) || false}/>\n            <FretboardHighlightNotes\n                stringHeight={stringSectionHeight}\n                frettedNotesPerString={frettedNotesPerString}\n                activeNote={activeNote}\n                stringIndex={stringIndex}/>\n        </>\n    )\n}\nexport default FretboardColoredNotes\n","import {Rect} from \"react-konva\";\nimport PropTypes from 'prop-types'\n\nconst FretboardInlays = ({fretMarkerLocations, fretboardHeight, xOffset}) => (\n    fretMarkerLocations.map(fml => {\n        const inlayHeight = fretboardHeight * 2 / 3\n        const markerYOffset = (fretboardHeight - inlayHeight) / 2\n\n        return (\n            <Rect\n                key={`inlay-marker-${fml.markNumber}`}\n                x={fml.markerStart + xOffset}\n                y={markerYOffset}\n                height={inlayHeight}\n                width={fml.markerWidth}\n                fill='black'\n            />\n        )\n    }))\nFretboardInlays.propTypes = {\n    fretMarkerLocations: PropTypes.array.isRequired,\n    fretboardHeight: PropTypes.number.isRequired,\n    xOffset: PropTypes.number.isRequired\n}\nexport default FretboardInlays\n","import {Rect} from \"react-konva\";\nimport PropTypes from \"prop-types\";\n\nconst Frets = ({fretDistancesFromNut, xOffset, fretWireWidth, fretHeight}) => (\n    fretDistancesFromNut.map((f, i) => (\n            <Rect\n                name={`fret-${i + 1}`}\n                key={f}\n                x={xOffset + f - fretWireWidth / 2}\n                y={0}\n                width={fretWireWidth}\n                height={fretHeight}\n                fill='silver'/>\n        )\n    )\n)\nFrets.propTypes = {\n    fretDistancesFromNut: PropTypes.array.isRequired,\n    xOffset: PropTypes.number.isRequired,\n    fretWireWidth: PropTypes.number.isRequired,\n    fretHeight: PropTypes.number.isRequired\n}\nexport default Frets\n","import {Group, Rect} from \"react-konva\";\nimport * as PropType from \"prop-types\";\n\nconst FretboardBinding = ({height, width, xOffset, yOffset, fretMarkerLocations}) => {\n    return (\n        <>\n            <Rect\n                name=\"binding\"\n                x={xOffset}\n                y={yOffset}\n                width={width}\n                height={height}\n                fill=\"black\"/>\n            {\n                fretMarkerLocations.map(fml => {\n                    const markerHeight = height / 2\n                    const markerY = yOffset + markerHeight / 2\n\n                    // if the marker is for an octave fret, we want to make 2 of them instead of 1\n                    if (fml.markNumber % 12 === 0) {\n                        const octaveWidth = fml.markerWidth / 3\n                        const secondMarkerX = fml.markerStart + 2 * octaveWidth\n                        return (\n                            <Group key={`binding-octave-${fml.markNumber}`}>\n                                <Rect\n                                    x={fml.markerStart + xOffset}\n                                    y={markerY}\n                                    height={markerHeight}\n                                    width={octaveWidth}\n                                    fill='white'\n                                />\n                                <Rect\n                                    x={secondMarkerX + xOffset}\n                                    y={markerY}\n                                    height={markerHeight}\n                                    width={octaveWidth}\n                                    fill='white'\n                                />\n                            </Group>\n                        )\n                    }\n                    return (\n                        <Rect\n                            key={`binding-marker-${fml.markNumber}`}\n                            x={fml.markerStart + xOffset}\n                            y={markerY}\n                            height={markerHeight}\n                            width={fml.markerWidth}\n                            fill='white'\n                        />\n                    )\n                })\n            }\n        </>\n    )\n}\nFretboardBinding.propTypes = {\n    height: PropType.number.isRequired,\n    width: PropType.number.isRequired,\n    xOffset: PropType.number.isRequired,\n    yOffset: PropType.number.isRequired,\n    fretMarkerLocations: PropType.array.isRequired\n}\nexport default FretboardBinding\n","import {Group, Rect, Shape} from \"react-konva\";\nimport FretboardInlays from \"./FretboardInlays\";\nimport Frets from \"./Frets\";\nimport FretboardBinding from \"./FretboardBinding\";\n\nconst Fretboard = ({\n                       height,\n                       bindingHeight,\n                       width,\n                       displayWidth,\n                       nutWidth,\n                       fretWireWidth,\n                       boardColor,\n                       fretMarkerLocations,\n                       fretDistancesFromNut\n                   }) => {\n    return (\n        <Group>\n            <Rect\n                name=\"nut\"\n                x={0}\n                y={0}\n                width={nutWidth}\n                height={height} fill='black'/>\n\n            <Rect\n                name=\"fingerboard\"\n                x={nutWidth}\n                y={0}\n                width={width}\n                height={height}\n                fill={boardColor}/>\n            <Shape\n                name=\"neck-heel\"\n                sceneFunc={(ctx, shape) => {\n                    ctx.beginPath();\n                    ctx.moveTo(width + nutWidth, 0);\n                    ctx.bezierCurveTo(\n                        displayWidth,\n                        0,\n                        displayWidth,\n                        height,\n                        width + nutWidth,\n                        height\n                    );\n                    ctx.closePath();\n                    ctx.fillStrokeShape(shape);\n                }}\n                fill={boardColor}/>\n\n            <FretboardInlays\n                xOffset={nutWidth}\n                fretboardHeight={height}\n                fretMarkerLocations={fretMarkerLocations}/>\n            <Frets\n                xOffset={nutWidth}\n                fretDistancesFromNut={fretDistancesFromNut}\n                fretWireWidth={fretWireWidth}\n                fretHeight={height}/>\n            <FretboardBinding\n                height={bindingHeight}\n                width={width}\n                xOffset={nutWidth}\n                yOffset={height}\n                fretMarkerLocations={fretMarkerLocations}/>\n        </Group>\n    )\n}\nexport default Fretboard\n","import {Provider, ReactReduxContext} from \"react-redux\";\nimport {Stage} from \"react-konva\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst ReduxStage = ({children, stageWidth, stageHeight}) => (\n    <ReactReduxContext.Consumer>\n        {/*Workaround for Konva creating a 'fresh render' that causes the redux context to be*/}\n        {/*'lost' when in a <Stage/> component*/}\n        {({ store }) => (\n            <Stage width={stageWidth} height={stageHeight}>\n                <Provider store={store}>\n                    {children}\n                </Provider>\n            </Stage>\n        )}\n    </ReactReduxContext.Consumer>\n)\nReduxStage.propTypes = {\n    stageWidth: PropTypes.number.isRequired,\n    stageHeight: PropTypes.number.isRequired\n}\nexport default ReduxStage\n","import Notes, {NoteSequence} from \"../Notes\";\nimport {Group, Layer} from \"react-konva\";\nimport {useMemo} from \"react\";\nimport FretboardColoredNotes from \"./FretboardColoredNotes\";\nimport Fretboard from \"./Fretboard\";\nimport {useSelector} from \"react-redux\";\nimport ReduxStage from \"./ReduxStage\";\nimport {instrumentSettings} from \"../settings\";\nimport Scales from \"../Scales\";\n\n// Precompute things like fret distances and widths, fret marker locations, and the position of each note on the fretboard\n// Without doing this upfront (and memoizing it!), performance tanks when changing the active note\nconst instrumentData = instrumentSettings => {\n    // the distance from the nut to fret n = L(1-2^frac{-n}{12}) where L is scale length\n    const fretDistancesFromNut = Array.from({length: instrumentSettings.numFrets}, (_, i) => i).map(i => instrumentSettings.scaleLength * (1 - Math.pow(2, -(i + 1) / 12)))\n    const fretWidths = [fretDistancesFromNut[0], ...fretDistancesFromNut.slice(1).map((d, i) => d - fretDistancesFromNut[i])]\n\n    const [totalDistance] = fretDistancesFromNut.slice(-1)\n    const fretMarkerLocations = instrumentSettings.fretMarkers.map(fm => {\n        const fretDistance = fretDistancesFromNut[fm - 1]\n        const fretWidth = fretWidths[fm - 1]\n        return {\n            markNumber: fm,\n            markerStart: (fretDistance - fretWidth) + (fretWidth / 4),\n            markerWidth: fretWidth / 2\n        }\n    })\n\n    // precompute the position of each note on the fretboard, then store it per string\n    const frettedNotesPerString = []\n    const notePositionsPerString = instrumentSettings.strings.map(openNoteName => {\n        return NoteSequence(openNoteName, instrumentSettings.numFrets + 1).map((n, i) => ({note: n, position: i}))\n    })\n    for (let string = 0; string < notePositionsPerString.length; string++) {\n        const frettedNotes = notePositionsPerString[string].slice(1)\n        const notesByLocation = {}\n        const y = instrumentSettings.stringSectionHeight * string\n        for (let n = 0; n < frettedNotes.length; n++) {\n            const sn = frettedNotes[n]\n            if (!notesByLocation[sn.note.name]) {\n                notesByLocation[sn.note.name] = []\n            }\n            const fretDistance = fretDistancesFromNut[sn.position - 1]\n            const fretWidth = fretWidths[sn.position - 1]\n            const x = fretDistance - fretWidth + instrumentSettings.fretWireWidth / 2 + instrumentSettings.nutWidth\n            notesByLocation[sn.note.name].push({\n                x, y, width: fretWidth - instrumentSettings.fretWireWidth\n            })\n        }\n        frettedNotesPerString.push(notesByLocation)\n    }\n\n    return {\n        fretWidths, fretDistancesFromNut, totalDistance, frettedNotesPerString, fretMarkerLocations\n    }\n}\n\nexport const FrettedInstrument = () => {\n    const currentInstrument = useSelector(s => s.instrument)\n    const activeNote = useSelector(s => s.selectedNote)\n    const scaleName = useSelector(s => s.scaleName)\n    const tonicIndex = useSelector(s => s.tonicIndex)\n    const scaleNoteIndices = Scales[scaleName].forTonic(tonicIndex)\n\n    const settings = instrumentSettings[currentInstrument]\n    const data = useMemo(() => instrumentData(settings), [settings])\n    const totalDistance = data.totalDistance\n    const fretboardHeight = settings.strings.length * settings.stringSectionHeight\n\n    const displayWidth = totalDistance + settings.nutWidth + settings.heelWidth\n    const displayHeight = fretboardHeight + settings.bindingHeight\n\n    const notesInScale = Object.fromEntries(scaleNoteIndices.map(ni => [Notes[ni].name, true]))\n    return (\n        <ReduxStage stageWidth={displayWidth} stageHeight={displayHeight}>\n            <Layer>\n                <Fretboard\n                    fretDistancesFromNut={data.fretDistancesFromNut}\n                    width={totalDistance}\n                    displayWidth={displayWidth}\n                    nutWidth={settings.nutWidth}\n                    fretWireWidth={settings.fretWireWidth}\n                    bindingHeight={settings.bindingHeight}\n                    boardColor={settings.fretboardColor}\n                    height={fretboardHeight}\n                    fretMarkerLocations={data.fretMarkerLocations}/>\n                <Group>\n                    {\n                        settings.strings.map((sn, i) => (\n                            <FretboardColoredNotes\n                                frettedNotesPerString={data.frettedNotesPerString}\n                                fretDistancesFromNut={data.fretDistancesFromNut}\n                                fretWidths={data.fretWidths}\n                                fretWireWidth={settings.fretWireWidth}\n                                numFrets={settings.numFrets}\n                                padding={settings.nutWidth}\n                                stringSectionHeight={settings.stringSectionHeight}\n                                key={`string-${i + 1}-${sn}`}\n                                stringIndex={i}\n                                activeNote={activeNote}\n                                notesInScale={notesInScale}\n                                openStringNoteName={sn}\n                                stringWidth={displayWidth}/>\n                        ))\n                    }\n                </Group>\n            </Layer>\n        </ReduxStage>\n    )\n}","import Notes from \"../Notes\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {changeTonic} from \"../actions\";\n\nconst TonicSelector = () => {\n    const tonicIndex = useSelector(s => s.tonicIndex)\n    const useFlats = useSelector(s => s.useFlats)\n    const dispatch = useDispatch()\n    return (\n        <select id=\"tonic\" value={tonicIndex} onChange={e => dispatch(changeTonic(parseInt(e.target.value, 10)))}>\n            {\n                Notes.map((note, i) => (\n                    <option key={note.name} value={i}>{note.displayName(useFlats)}</option>\n                ))\n            }\n        </select>\n    );\n}\nexport default TonicSelector\n","import Scales from \"../Scales\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {changeScale} from \"../actions\";\n\nconst ScaleSelector = () => {\n    const scaleName = useSelector(s => s.scaleName)\n    const dispatch = useDispatch()\n    return (\n        <select id=\"scale\" value={scaleName} onChange={e => dispatch(changeScale(e.target.value))}>\n            {\n                Object.entries(Scales).map(([scaleName, _]) => (\n                    <option key={scaleName} value={scaleName}>{scaleName}</option>\n                ))\n            }\n        </select>\n    );\n}\nexport default ScaleSelector\n","import {instrumentSettings} from \"../settings\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {changeInstrument} from \"../actions\";\n\nconst InstrumentSelector = () => {\n    const currentInstrument = useSelector(s => s.instrument)\n    const dispatch = useDispatch()\n    return (\n        <select id=\"instrument\" value={currentInstrument} onChange={e => dispatch(changeInstrument(e.target.value))}>\n            {\n                Object.entries(instrumentSettings).map(([instrument, _]) => (\n                    <option key={instrument} value={instrument}>\n                        {instrument.charAt(0).toUpperCase() + instrument.slice(1)}\n                    </option>\n                ))\n            }\n        </select>\n    );\n}\nexport default InstrumentSelector\n","import {useDispatch, useSelector} from \"react-redux\";\nimport {changeFlats} from \"../actions\";\n\nconst FlattedNameToggle = () => {\n    const useFlats = useSelector(s => s.useFlats)\n    const dispatch = useDispatch()\n    return (\n        <label>\n            <input type=\"checkbox\" checked={useFlats} onChange={() => dispatch(changeFlats(!useFlats))}/>\n            Show Flats\n        </label>\n    );\n}\nexport default FlattedNameToggle\n","import TonicSelector from \"./TonicSelector\";\nimport ScaleSelector from \"./ScaleSelector\";\nimport InstrumentSelector from \"./InstrumentSelector\";\nimport FlattedNameToggle from \"./FlattedNameToggle\";\nimport React from \"react\";\n\nconst Options = () => {\n    return (\n\n        <div id=\"option-selections\">\n            <TonicSelector/>\n            <ScaleSelector/>\n            <InstrumentSelector/>\n            <FlattedNameToggle/>\n        </div>\n    )\n}\nexport default Options\n","import './App.css';\nimport ScaleConstellation from \"./components/ScaleConstellation\";\nimport ColorWheel from \"./components/ColorWheel\";\nimport React from \"react\";\nimport {FrettedInstrument} from \"./components/FrettedInstrument\";\nimport {wheelStageSideLength} from \"./settings\";\nimport ReduxStage from \"./components/ReduxStage\";\nimport Options from \"./components/Options\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Options/>\n            <ReduxStage stageWidth={wheelStageSideLength} stageHeight={wheelStageSideLength}>\n                <ColorWheel/>\n                <ScaleConstellation/>\n            </ReduxStage>\n            <FrettedInstrument/>\n        </div>\n    );\n}\n\nexport default App;\n","import {FLATS_CHANGED, INSTRUMENT_CHANGED, SCALE_CHANGED, SELECTED_NOTE_CHANGED, TONIC_CHANGED} from \"./actions\";\n\nconst initialState = {\n    tonicIndex: 0,\n    scaleName: 'Major',\n    useFlats: false,\n    selectedNote: null,\n    instrument: 'guitar'\n}\n\nexport default function reducer(state = initialState, action) {\n    switch (action.type) {\n        case TONIC_CHANGED:\n            return {\n                ...state,\n                tonicIndex: action.index\n            }\n        case SCALE_CHANGED:\n            return {\n                ...state,\n                scaleName: action.scale\n            }\n        case FLATS_CHANGED:\n            return {\n                ...state,\n                useFlats: action.useFlats\n            }\n        case SELECTED_NOTE_CHANGED:\n            return {\n                ...state,\n                selectedNote: action.selected\n            }\n        case INSTRUMENT_CHANGED:\n            return {\n                ...state,\n                instrument: action.instrument\n            }\n        default:\n            return state\n    }\n}","import {createStore} from \"redux\";\nimport reducer from \"./reducer\";\n\nconst store = createStore(reducer)\nexport default store\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {Provider} from \"react-redux\";\nimport store from \"./store\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}